                        Một số điều cần biết về Javascript
Javascript Runtime và Javascript Engine
    JS Runtime & Engine
        JS Runtime: Xét trong môi trường browser(trình duyệt)
        Đối với môi trường browser có 4 thành phần chính để giúp Javascript có thể chạy được cũng như xử lý được 
            các task vụ bất đồng bộ: Js Engine, 
        Trong đó có thành phần quan trọng nhất là Js Engine
        Còn lại 3 thành phần khác là: Timers, XHR, DOM giúp cho Js có thể quản lý được các task vụ bất đồng bộ bao gồm
            Web APIs, Even Loops và Callback Queues
        Js là 1 ngôn ngữ đơn luồng(Single Thread), ko thể thực thi song song cùng 1 lúc 2 task vụ được
Execution Context
    Khi 1 đoạn chương trình Javascript được chạy thì Javascript Engine luôn luôn khởi tạo mới 1 Execution Context để theo 
        dõi và và qản lý và giám sát trình tự thực thi
    Đoạn chương trình này có thể là 1 chương trình con hoặc toàn bộ ứng dụng khi khởi chạy lần đầu tiên 
        Chương trình chính(App): Global Execution Context 
        Chương trình con: Local Execution Context
    Khi Js Engine tạo ra một Execution Context thì nó luôn luôn qua 2 giai đoạn: Creation Phase và Execution Phase 
Creation Phase(Giai đoạn khởi tạo)
    - Setup memory(Variables Envionments)
    - Định nghĩa Scope Chain 
        - Global Scope
        - Script Scope 
        - Block Scope 
        - Function Scope 
    - Ràng buộc từ khóa this (Ngoại trừ Arrow Function)
        - Default binding
        - Implicit binding 
        - Explicit binding
    Khi chạy 1 app có Global memory: global = window = this 
    var: tầm vực global memory 
    let, const: Tầm vực Script Scope
Practice
    Practice 01
        debugger
            Call Stack
                (anonymous)     hoising.js:1  -> Dòng code đang thực thi
            Scope: Script, Global
                2 tầm vực Script, Global vì đang chạy file hoising.js và các biến đang được khai báo ở cấp cao nhất của file
            Global              Window
                age, getFullName vì được khai báo bằng var
                calAge vì được khai báo bằng function
            Script: 
                firstName, lastName, yearOfBirth vì được khai báo bằng let và const. Ngoài ra nếu các biến này được khai báo 
                    trong các block {}, như if, else chẳng hạn thì sẽ có tầm vực là Block. Hoặc khai báo trong function thì 
                    có tầm vực là function
    hoising:  Khi Javascript khi một Execution Context được khởi tạo thì nó luôn luôn qua 2 giai đoạn: 
        Creation Phase(khởi tạo) set up buộc nhớ để lưu lại
        Execution Phase
    Temporal Dead Zone(TDZ)
        Liên quan đến từ khóa let và const
        // Start TDZ
        // Không thể truy cập age khi chưa khai báo let age = 30
        // console.log(age);
        let age = 30; // End TDZ
        C:\xampp\htdocs\javascript_advance\01_js_to_know\04_Temporal_Dead_Zone\tdz.js
        TDZ luôn luôn được khởi tạo khi bắt đầu 1 tầm vực mới và bên trong đó có sử dụng từ khóa let 
        Trong khu vực TDZ này ko thể sử dụng, truy cập được vào biến hay gán biến đó cho 1 giá trị, khi khởi tạo biến age thì sẽ kết 
            thúc khu vực TDZ 
        Khi muốn chia sẻ dữ liệu giữa 2 Scope khác nhau thì bắt buộc phải đẩy lên cấp cao hơn
        Cấp cao hơn tầm vực Script là Scope Global(window, this)
        window, this: giúp chia sẻ dữ liệu giữa 2 file 
            window.hello='world'
            this.course='Javascript'
    Practice 02
    Practice 03
        Scope được hình thành trong giai đoạn Creation Phase phụ thuộc vào vị trí khai báo hàm chứ không phụ thuộc vào 
            vị trí gọi hàm 
Parameters và Arguments
    Function parameters là những tham số (variables) được đặt tên và liệt kê trong phần khai báo (định nghĩa) của một hàm
    Function arguments là những đối số đã được xác định giá trị được truyền vào hàm tại thời điểm thực thi hàm đó.
First Class Objects trong Javascript
    First Class Objects là những đối tượng cụ thể (entity, instance) trong lập trình mà tại thời điểm thực thi nó có thể được 
        truyền như là một argument, được gán cho một biến bất kỳ hoặc có thể được return từ một function khác
    First Class Function trong Javascript:
        Function trong Javascript cũng được coi như 1 Objects cho nên 1 function có thể được truyền vào trong 1 function khác,
            gán vào trong 1 biến, return 1 function ở bên trong 1 function khác
Higher Order Functions và Callbacks
    Higher order functions là những hàm thỏa một trong hai điều kiện sau:
        Có thể nhận một function khác như là một đối số (argument)
        Output là một function
    Có rất nhiều Function cốt lõi của Javascript sử dụng cơ chế này khiến cho mã nguồn dễ đọc, đễ hiểu hơn
        như map, filter, reduce, ..
    function cloneArrayAndDoSomething(arrInput, func) {
        var arrOutput = [];
        for(var idx = 0; idx < arrInput.length; idx++) {
            arrOutput.push(
                func( arrInput[idx] );
            )
        }
        return arrOutput;
    }
    const handleAdd3 = function(num) {
        return num + 3;
    }
    const result = cloneArrayAndDoSomething(arr, handleAdd3);
    func: Là Callback vì ở đây chỉ truyền tham chiếu của hàm vào thôi, thực tế hàm được gọi lại khi hàm cloneArrayAndDoSomething
        được thực thi 
    Callback: Gọi lại sau 
    