                        Một số điều cần biết về Javascript
Javascript Runtime và Javascript Engine
    JS Runtime & Engine
        JS Runtime: Xét trong môi trường browser(trình duyệt)
        Đối với môi trường browser có 4 thành phần chính để giúp Javascript có thể chạy được cũng như xử lý được 
            các task vụ bất đồng bộ: Js Engine, 
        Trong đó có thành phần quan trọng nhất là Js Engine
        Còn lại 3 thành phần khác là: Timers, XHR, DOM giúp cho Js có thể quản lý được các task vụ bất đồng bộ bao gồm
            Web APIs, Even Loops và Callback Queues
        Js là 1 ngôn ngữ đơn luồng(Single Thread), ko thể thực thi song song cùng 1 lúc 2 task vụ được
Execution Context
    Khi 1 đoạn chương trình Javascript được chạy thì Javascript Engine luôn luôn khởi tạo mới 1 Execution Context để theo 
        dõi và và qản lý và giám sát trình tự thực thi
    Đoạn chương trình này có thể là 1 chương trình con hoặc toàn bộ ứng dụng khi khởi chạy lần đầu tiên 
        Chương trình chính(App): Global Execution Context 
        Chương trình con: Local Execution Context
    Khi Js Engine tạo ra một Execution Context thì nó luôn luôn qua 2 giai đoạn: Creation Phase và Execution Phase 
Creation Phase(Giai đoạn khởi tạo)
    - Setup memory(Variables Envionments)
    - Định nghĩa Scope Chain 
        - Global Scope
        - Script Scope 
        - Block Scope 
        - Function Scope 
    - Ràng buộc từ khóa this (Ngoại trừ Arrow Function)
        - Default binding
        - Implicit binding 
        - Explicit binding
    Khi chạy 1 app có Global memory: global = window = this 
    var: tầm vực global memory 
    let, const: Tầm vực Script Scope
Practice
    Practice 01
        debugger
            Call Stack
                (anonymous)     hoising.js:1  -> Dòng code đang thực thi
            Scope: Script, Global
                2 tầm vực Script, Global vì đang chạy file hoising.js và các biến đang được khai báo ở cấp cao nhất của file
            Global              Window
                age, getFullName vì được khai báo bằng var
                calAge vì được khai báo bằng function
            Script: 
                firstName, lastName, yearOfBirth vì được khai báo bằng let và const. Ngoài ra nếu các biến này được khai báo 
                    trong các block {}, như if, else chẳng hạn thì sẽ có tầm vực là Block. Hoặc khai báo trong function thì 
                    có tầm vực là function
    hoising:  Khi Javascript khi một Execution Context được khởi tạo thì nó luôn luôn qua 2 giai đoạn: 
        Creation Phase(khởi tạo) set up buộc nhớ để lưu lại
        Execution Phase
    Temporal Dead Zone(TDZ)
        Liên quan đến từ khóa let và const
        // Start TDZ
        // Không thể truy cập age khi chưa khai báo let age = 30
        // console.log(age);
        let age = 30; // End TDZ
        C:\xampp\htdocs\javascript_advance\01_js_to_know\04_Temporal_Dead_Zone\tdz.js
        TDZ luôn luôn được khởi tạo khi bắt đầu 1 tầm vực mới và bên trong đó có sử dụng từ khóa let 
        Trong khu vực TDZ này ko thể sử dụng, truy cập được vào biến hay gán biến đó cho 1 giá trị, khi khởi tạo biến age thì sẽ kết 
            thúc khu vực TDZ 
        Khi muốn chia sẻ dữ liệu giữa 2 Scope khác nhau thì bắt buộc phải đẩy lên cấp cao hơn
        Cấp cao hơn tầm vực Script là Scope Global(window, this)
        window, this: giúp chia sẻ dữ liệu giữa 2 file 
            window.hello='world'
            this.course='Javascript'
    Practice 02
    Practice 03
        Scope được hình thành trong giai đoạn Creation Phase phụ thuộc vào vị trí khai báo hàm chứ không phụ thuộc vào 
            vị trí gọi hàm 
Parameters và Arguments
    Function parameters là những tham số (variables) được đặt tên và liệt kê trong phần khai báo (định nghĩa) của một hàm
    Function arguments là những đối số đã được xác định giá trị được truyền vào hàm tại thời điểm thực thi hàm đó.
First Class Objects trong Javascript
    First Class Objects là những đối tượng cụ thể (entity, instance) trong lập trình mà tại thời điểm thực thi nó có thể được 
        truyền như là một argument, được gán cho một biến bất kỳ hoặc có thể được return từ một function khác
    First Class Function trong Javascript:
        Function trong Javascript cũng được coi như 1 Objects cho nên 1 function có thể được truyền vào trong 1 function khác,
            gán vào trong 1 biến, return 1 function ở bên trong 1 function khác
Higher Order Functions và Callbacks
    Higher order functions là những hàm thỏa một trong hai điều kiện sau:
        Có thể nhận một function khác như là một đối số (argument)
        Output là một function
    Có rất nhiều Function cốt lõi của Javascript sử dụng cơ chế này khiến cho mã nguồn dễ đọc, đễ hiểu hơn
        như map, filter, reduce, ..
    function cloneArrayAndDoSomething(arrInput, func) {
        var arrOutput = [];
        for(var idx = 0; idx < arrInput.length; idx++) {
            arrOutput.push(
                func( arrInput[idx] );
            )
        }
        return arrOutput;
    }
    const handleAdd3 = function(num) {
        return num + 3;
    }
    const result = cloneArrayAndDoSomething(arr, handleAdd3);
    func: Là Callback vì ở đây chỉ truyền tham chiếu của hàm vào thôi, thực tế hàm được gọi lại khi hàm cloneArrayAndDoSomething
        được thực thi 
    Callback: Gọi lại sau 
Closure trong Javascript
    Khi 1 hàm được khởi tạo thì Closure cũng được tạo theo, tức là tại thời điểm tạo ra hàm thì 1 Closure sẽ 
        được gắn kèm với nó chứa tất cả các biến nằm ngoài tầm vực của hàm đó. Tức là 1 Closure sẽ cho phép 
        1 function ở bên trong được phép truy cập vào những giá trị của function ở bên ngoài
    Trong innerFunc sử dụng giá trị nào ở bên ngoài thì Closure sẽ lưu các giá trị đó
    function outerFunc() {
    let number = 20;
    let course = 'Javascript nâng cao';
    console.log("[scope outerFunc]", course);
    function innerFunc() {
        let number2 = 50;
        let total = number2 + number;
        console.log("[scope innerFunc]", total);
        return total;
    }
    return innerFunc;
    }
    const func = outerFunc();
    const result = func();
Implicit Binding and This keyword
    this được ràng buộc (binding) vào một Execution Context(ngữ cảnh thực thi) mỗi khi Execution Context này được khởi tạo
    Khi nào Execution Context được khởi tạo khi
        Khi gọi hàm (Execution Context) -> this có thể thay đổi tùy theo từng hàm
        Khi chạy ứng dụng (Global Execution Context)
    Có 3 kiểu ràng buộc this:
        Implicit Binding (Ràng buộc ngầm)
            Thông qua dot notation 
            ex: john.sum(10, 20);
        Explicit Binding (Ràng buộc tường minh)
            Do lập trình viên quyết định
            Sử dụng các method có sẵn (built-in) của Javascript
                .bind(this)
                .call(this, arg1, arg2, ...)
                .apply(this, [arg1, arg2, ...])
        Default Binding (Ràng buộc mặc định)
            Mặc định ràng buộc globalThis = window
            ex:
                var func = john.sum;
                func(10, 20);
            Trường hợp mặc định này thì nó cũng đúng với các function bình thường khi gọi biến this trong function đó 
Explicit Binding, bind, call và apply
    Bind
        Là 1 method có sãn của Javascript, truyền vào 1 object bất kỳ. Object này sẽ được ràng buộc vào biến this 
        Khi gọi hàm bind() thì nó sẽ trả về 1 function mới đã được dàng buộc cố định object mà mình đã truyền vào 
        Có thể sử dụng hàm bind này để cố định this
    Call và apply
        Nhận vào một object bất kỳ trong tham số đầu tiên
        Function này sẽ được gọi ngay lập tức
        Return về kết quả của lời gọi hàm
Practice 04
    Arrow function không được ràng buộc this:
        Phụ thuộc vào nơi khai báo function
        Sử dụng this như là scope của function bên ngoài. 
            this của arrow function được coi như là Closure ở bên ngoài tức là Scope Chain ở bên ngoài
            -> chính là this của function bên ngoài nó 
        Để có thể truy cập được this chính là object hiện tại thì không được phép khai báo là arrow function
Strict mode
    const btnEl = document.getElementById('test-this')
    const john = {
        addEvent() {
            btnEl.addEventListener('click', this.handleClick);
        },
        handleClick() {
            console.log('handleClick', this);
        }
    }
    this.handleClick ở đây thực hiện vai trò truyền hàm vào Javascript Dom chứ ko phải thực hiện gọi hàm theo kiểu dot notation.
        Khi trình duyệt nhận diện được sự kiện của người dùng là click thì môi trường trình duyệt và môi trường Dom giúp ta gọi 
            hàm này
    
            ==========================================================================================================

                        Asynchronous Programming

Concurrency, Parallelism
    Concurrency (Đồng thời): Là khi hai hay nhiều tác vụ có thể bắt đầu xử lý, đang xử lý và hoàn tất trong
        khoảng thời gian chồng chéo lên nhau.(overlapping time).
        Trong 1 thời điểm nó chỉ xử lý 1 task vụ thôi, nếu task vụ này quá tốn thời gian, cần phải chờ thì có thể tạm dừng task 
            vụ đó để chèn task vụ khác lên và xử lý tiếp. Khi task vụ khác xử lý xong thì sẽ quay trở lại task vụ đang chờ để xủ lý
    Parallelism (Song song): Là khi hai hay nhiều tác vụ có thể bắt đầu xử lý, đang xử lý và hoàn tất trong
        chính xác cùng một thời điểm -> Java
    Javascript Concurrency Modal
Single Thread và Blocking
    Javascript là ngôn ngữ lập trình đơn luồng.
    Đơn luồng: Tại một thời điểm chỉ có duy nhất một câu lệnh được thực thi.
    Thực thi theo kiểu đồng bộ từng dòng
    Blocking: Javascript chỉ xử lý đơn luồng nên dẫn đến vấn đề là Blocking, là đoạn code sẽ bị chặn khi mà đoạn code ở phía trên chưa 
        xử lý xong
SetTimeout và những hiện tượng lạ
    Các thành phần cốt lõi của Javascript:
        Thread of execution
        Memory/variable environment
        Call stack
    Chúng ta cần thêm nhiều thành phần nữa để xử lý:
        Web APIs(browser)
        Event loop
        Callback queues
            Macro task queue and micro task queue
Concurrency model trong Javascript
    SetTimeout là của Web APIs(browser) chứ không phải là của Javascript vì nếu là của Javascript thì nó phải thỏa mãn cơ chế
        Single Thread. Tính năng thật sự của browser đó là Timers là bộ đếm của trình duyệt
    Timers thực hiện đếm thời gian, nếu hết thời gian thì tham số hàm được truyền trong SetTimeout sẽ được gửi xuống 
        Callbacks queue.
    Một mình Javascript thì nó là Single Thread nhưng với sự hỗ trợ của trình duyệt thì 2 task được thực hiện song song 
        trong quá trình Javascript Engine thực hiện task vụ thì Timers thực hiện đếm song song
    Event loop là vòng lặp vô hạn, nó sẽ liên tục kiểm tra nếu như Call Stack rỗng, nghĩa là chương trình chạy song rồi không còn 
        không còn code đồng bộ nào của Javascript để chạy thì mới cho phép hàm được set ở trong Callbacks queue đưa 
        lên để thực thi. Khi được đưa lên để thực thi thì nó sẽ giống như Javascript thông thường
Event Loop và Callback Queues
Practice
    Practice 01
        Yêu cầu Challenge 01:
            1. Các lời gọi API sẽ có thời gian chạy khác nhau và ngâu nhiên
            2. Kết quả phải được hiển thị ra cho người dùng theo đúng thứ tự 1 -> 2 -> 3
    Practice 01 - Solution
    Practice 02
        Yêu cầu:
            Các lời gọi API sẽ có thời gian chạy khác nhau và ngẫu nhiên.
            Cả 3 lời gọi API phải được chạy đồng thời cùng một lúc.
            Chỉ áp dụng các kiến thức cơ bản của Javascript (Không dùng Promise)
            API nào chạy xong phải in kết quả ra ngay (Nhưng phải đảm bảo đúng thứ tự 1->2->3)
    Practice 02 - Solution
        Higher Order Function, Callback
Design Pattern(Thunk Pattern)
    Thunk chỉ là một tên gọi khác của Function
    Function này là một dạng Function với ứng dụng đặc biệt
    Thunk là một function có thể delay quá trình đánh giá biểu thức ra giá trị khi xử lý trong Javascript
    Normal
        // sub là một function thông thường
        function sum(a, b) { return a + b }
        // gọi hàm in ra ngay giá trị biểu thức 10 + 20
        console.log( sum(10, 20) );
    Thumb 
        // function dùng để tạo ra một thunk
        function createThunk() {
            let result = sum(10, 20);
            return function() {
                return result;
            }
        }
        // Tạo thunk và xử lý ra kêt qua
        let thunkFn = createThunk();
        // Delay việc lâ ́y kêt qua Khi gọi thunk thì mới có data
        let result = thunkFn();
Callback Hell
    Callback tồn tại 2 vấn đề cần phải cải thiện:
        1. Xử lý lỗi (Error handling issues)
        2. Giao quyền kiểm soát chương trình cho bên thứ 3 (Trust Issues)
    

            ==========================================================================================================

                        Promise

Micro Tasks và Macro Tasks Queue
    Callback Queues bao gồm hai loại hàng đợi (Queues) với thứ tự ưu tiên khác nhau
        Tasks Queue - Macro Tasks Queue
        Micro Tasks Queue
    Điểm giống nhau của hai loại hàng đợi này là các tác vụ thực thi cần phải xếp hàng chờ khi Call Stack đang xử 
        lý. Một khi Call Stack rỗng thì các tác vụ mới được phép di chuyển lần lượt để thực thi sau mỗi event loop.
    Điểm khác biệt ở đây là xét về thứ tự ưu tiên. Micro Tasks sẽ có độ ưu tiên thực thi cao hơn Macro Tasks.
    Các dạng Macro Tasks thường gặp: Hàm Callback từ sự kiện người dùng (Click, Scroll, ...). Hàm truyền vào 
        setTimeout(), setInterval()
    Các dạng Micro Tasks: Dùng với Promise. Hàm truyền vào queueMicrotask()
Queue_micro_task
Fetch và Promise
Promise và Patterns
    Thunk là một function cho phép delay quá trình lấy dữ liệu
    Promise là một Object cũng cho phép delay quá trình lấy dữ liệu
    Điểm đặc biệt của Promise là tất cả các function callback được gửi sang Web APIs để chờ
    Sau khi Web APIs thực hiện lời gọi HTTP hoàn tất, Web APIs sẽ chuyển function callback ngược xuống
        Callback Queues để chờ xử lý.
    Cụ thể là sẽ đưa vào Micro Tasks Queue
Challenge Promise
    Practice 01
        Micro Tasks Queue có độ ưu tiên cao hơn Macro Tasks Queue. Nhưng độ ưu tiên cao hơn ở đây là tại cùng 1 thời điểm 
            2 hàm cùng nằm trong Queue thì Micro Tasks Queue sẽ được ưu tiên trước
        Ex:
            SetTimeout: 0.1ms -> Callback function được chuyển vào Macro
            Fetch hết 1ms -> Callback function được chuyển vào Micro 
        2 Callback function này được đưa vào tại 2 thời điểm khác nhau nên khi Event Loop liên tục kiểm tra thì khi kiểm tra đến Queue 
            của Macro thì khi đó Queue của Micro vẫn đang là 1 Queue rỗng
    Practice 02
        block5Seconds(): Thêm 1 đoạn code blocking Javascript, không dùng tính năng nào của Web APIs cả nên nó là code đồng bộ ở trong 
            Javascript
        Sau khi chạy hết các đoạn code đồng bộ của Javascript thì SetTimeout và fetch mới được chạy 
    Practice 03
Promise Chain
    Khi hàm Promise.prototype.then() được thực hiện và gửi kèm theo các Call Back cần thiết thì bản
        thân nó cũng trả về một Promise.
    Promise cho phép xử lí một chuỗi nhiều các tác vụ bất đồng bộ liên tiếp nhau.
Promise Constructor
    Promise() Constructor là một cách chính thức từ Javascript hỗ trợ cho lập trình viên có thể sử dụng tính
        năng của Promise trong các Functions bất đồng bộ bằng cách Wrap các Functions đó nếu nó chưa hỗ
        trợ Promises.
    Trong Javascript hay trong Web APIs thì SetTimeout, setInterval, event... thì chưa hỗ trợ Promise
    Sử dụng từ khóa new để khởi tạo một Object Promise mới
Promise All
    Promise.all(iterable) là một phương thức của Object Promise giúp chạy đồng thời nhiều tác vụ cùng một lúc
    Tham số truyền vào là một iterable - Tức là một array có thể lặp.
    Mỗi phần tử của Array chính là một Promise khác
    Promise.all(iterable) sẽ return về một Promise mới sẽ kết thúc khi:
        Toàn bộ Promise trong Array truyền vào hoàn tất.
        Ít nhất trong số Promise trong Array bị lỗi.
    Kết quả thành công sau khi xử lý chứa trong Promise mới trả về cũng là một Array theo thứ tự giống tự
        iterable truyền vào
Practice 04
    Đối với Promise All thì sẽ in ra 1 lượt 3 kết quả luôn, thời gian in là thời gian của kết Promise lâu nhất
    Yêu cầu:
        1. Các lời gọi API sẽ có thời gian chạy khác nhau và ngẫu nhiên.
        2. Cả 3 lời gọi API phải được chạy đồng thời cùng một lúc.
        3. Chỉ áp dụng các kiến thức liên quan tới Promise.
        4. API nào chạy xong phải in kết quả ra ngay (Nhưng phải đảm bảo đúng thứ tự 1->2->3)
Recap Promise
    Promise là một Object đặc biệt của Javascript(Không phải của Web APIs) đại diện cho một tác vụ được xử lý bất đồng bộ, và nó chứa giá trị trả về
        cũng như là các giá trị lỗi xảy ra từ tác vụ đó.
    Promise sinh ra để giải quyết các vấn đề của Callback và Callback Hell
    Callback Hell gặp 2 vấn đề chính:
        Handle Error
        Trust Issues
    
            ==========================================================================================================

                        Iterators, Generators và Async Await

Iteration Protocols
    Iterators và Generators là các khái niệm cốt lõi, cội nguồn để chúng ta hiểu được cách Async và Await hoạt động
    Async Await là tính năng mới xuất hiện trong Javascript ES7
    Iteration protocols:
        Đây không phải là cú pháp mới được xây dựng trong Javascript
        Iteration Protocols chỉ là những giao thức mới xuất hiện trong ES6 cho phép lập trình viên có thể tự định
            nghĩa cách thức lặp của một Object bất kỳ
        Bản chất Array cũng đã hiện thực giao thức này ngầm ở bên dưới, do đó chúng ta có thể sử dụng những
            tính năng mới để lặp qua một Array như forEach(), for..in, for..of, map(), ...
        Để áp dụng các giao thức này chúng ta cần tuân thủ quy tắc của 2 giao thức mà Javascript cung cấp:
            Iterable protocol và Iterator protocol
    Xây dựng:
        Lặp từng phần tử của Array theo thời gian không cố định
        Khi nào gọi hàm next() thì sẽ lặp một lần
        next() trả về một object có value và done
            value là giá trị mỗi phần tử
            done là giá trị boolean cho biết còn lặp được nữa hay không?
Practice 01
Iterable và Iterator Protocol
    Iterable và Iterator protocol nằm trong nhóm các giao thức Iteration Protocols
    Ví dụ một Object được gọi là Iterable (Có thể lặp): Array, String, ...
    Object này chỉ cần tuân thủ một số quy tắc sau đây
        Có hiện thực (khai báo) một phương thức đặc biệt (Method)
        Method này có key là một hằng số Symbol.iterator được cung cấp sẵn bởi Javascript
        Method này không có tham số truyền vào
        Method này khi được gọi sẽ return về một Iterator Object
    Một Object được coi là một Iterator nếu nó tuân thủ các quy tắc sau đây:
        Có hiện thực hàm next() là method của nó
        Hàm next() không nhận vào tham số nhưng khi được gọi sẽ trả về một Object có hai thuộc tính
            value và done
Practice 02
Symbol
    Bản đặc tả ngôn ngữ từ ECMA:
        https://262.ecma-international.org/11.0/#sec-ecmascript-language-types-symbol-type
    Kiểu dữ liệu symbol có thể được sử dụng làm key của một Object, đóng vai trò là thuộc tính của Object đó
    Mỗi giá trị Symbol được tạo ra có giá trị độc nhất vô nhị (Không bao giờ bị trùng với những giá trị khác)
        và không thể thay đổi được
    Ứng dụng:
        Tạo ra các Hidden Properties (Như trong Promise)
        Đảm bảo sự an toàn của một Object khi trao đổi qua các môi trường khác nhau -> Trust issues
Generator Concepts
    Generator Object là một Object đặc biệt được return từ một Generator Function
    Generator Function là một dạng hàm đặc biệt trong Javascript được khai báo bằng từ khóa function*
Generator Function và từ khóa yield
    Khi gọi hàm Generator Function thì nó không thực thi ngay mà nó chỉ nhờ Javascript return 1 Generator Object, sau 
        đó muốn nhảy vào hàm Generator Function để chạy thì phải sử dụng các method như next() của Iterator
    yield: Tạm dừng hàm ở ngay vị trí đó và thực hiện return value
Truyền thông điệp với Generator Function
    Passing messages 01
        Các đặc điểm quan trọng của Generator Function:
            Tạm dừng thực thi tại một dòng lệnh bất kỳ bằng từ khóa yield
            Trả về một giá trị value ra bên ngoài thông qua kết quả của việc gọi method next()
            Truyền thông điệp ngược vào bên trong ngay vị trí khai báo yield trước đó để thực thi các dòng lệnh tiếp theo
    Passing messages 02
        yield (30 + 200) -> return 230 
        (yield 30) + 200 -> return 30
Kết hợp Generators với Promise
    Generator và Promise 01
        Generator là đồng bộ 
        Để tận dụng được sức mạnh của Generator thì cần kết hợp thêm với Promise để có cái bất đồng bộ khi đang thực hiện 1 
            bất đồng bộ trong Generator Function thì cho phép nhảy ngược ra để thực hiện các câu lệnh không liên quan. Khi 
            Promise thực hiện thành công trả về dữ liệu thì mới quay trở lại để thực thi tiếp trong Generator Function
    Generator và Promise 02
Async Await
    Async Function là một hàm được định nghĩa với từ khóa async phía trước
    Await là một từ khóa chỉ được phép sử dụng trong Async Function để xử lý việc chờ đợi một tác vụ bất đồng bộ nào đó
    Cơ chế hoạt động bản chất dựa trên Promise và Generator
    Xuất hiện trong phiên bản từ Javascript ES7 trở lên
    Async và Await giúp phong cách lập trình bất đồng bộ trở nên rõ ràng hơn, không cần phải sử dụng
        Promise Chain một cách tường minh. Javascript sẽ chúng lập trình viên xử lý ngầm những công việc
        này.
    Async Function luôn luôn ngầm return về một Promise
        Nếu bên trong function return về một giá trị. Giá trị đó sẽ là kết quả của Promise khi xử lý thành công.
        Nếu function Throw một error. Giá trị error này sẽ là kết quả của Promise khi xử lý thất bại.
Thực hành Async
    Practice Async 01
    Practice Async 02
        then() được đưa vào micro task queue 
        SetTimeout() được đưa vào Macro task queue
        await() Thoát ra khỏi hàm để thực hiện các task bên ngoài hàm(bản chất là cũng có then)
Generator và Babel
    Generator là tính năng mới của Javascript
    Generator không chạy được trình trình duyệt cũ như IE
    Muốn sử dụng tính năng của Generator trong các trình duyệt có thể sử dụng Babel để biên dịch ngược lại cú pháp cũ
    Build

            ==========================================================================================================

                        Observer và Observable Pattern

Intro 
    Có những Pattern chúng ta ngầm sử dụng hằng ngày trong Javascript
    Tìm hiểu, đào sâu, mô hình hóa một Design Pattern mới khiến chúng ta thay đổi hoàn toàn tư duy về
        Asynchronous Programming.
    Trong thế giới lập trình Web, ngoài việc sử dụng Promise và Generator, chúng ta còn tương tác với
        Events (DOM) rất nhiều.
    Iterators bản chất cũng tuân thủ theo mô hình Producer-Consumer
        Producer là nơi sản sinh ra dữ liệu
        Consumer chủ động gởi yêu cầu lấy dữ liệu từ Producer sau mỗi lần gọi hàm next()
        Producer ~ Iterable
        Consumer ~ Iterator
        Consumer lấy dữ liệu liên tục cho tới khi
            Producer nói rằng hết dữ liệu để lấy rồi (done = true)
            Producer nói rằng có lỗi (error) xảy ra
    Events Handling cũng có hơi hướng của mô hình Producer-Consumer:
        Producer là nơi sản sinh ra dữ liệu
        Consumer đăng ký (subscribe) lấy dữ liệu từ Producer
        Consumer không chủ động gọi hàm next()
        Mỗi khi có tín hiệu dữ liệu được gửi về. Producer sẽ kích hoạt hàm next() để gửi dữ liệu cho
            Consumer đã đăng ký
        Consumer có quyền hủy đăng ký nếu không muốn lấy dữ liệu nữa
    Giống nhau:
        Đều áp dụng theo mô hình truyền tải dữ liệu tới Consumer
    Khác nhau:
        Ai là người quản lý việc gửi dữ liệu?
        Iterators: Chúng ta kiểm soát việc lấy dữ liệu
        Events: Chúng ta không kiểm soát việc lấy dữ liệu.
Tại sao nên dùng Observable Pattern
    Có rất nhiều Cấu trúc dữ liệu có thể áp dụng giao thức Iterable và Iterator (Object, String, ...)
    setTimeout có thể được wrapped bởi Promise Object
    DOM Events, XMLHTTPRequest, setInterval, WebSocket, ...
    Array có những built-in methods như map, filter, forEach, ...
    Observable Pattern giúp chuẩn hóa tất cả các mô hình Producer-Consumer về chung cách thức xử lý
        Producer là người kiểm soát việc gửi dữ liệu.
        Consumer là người subscribe để nhận dữ liệu từ Producer
        Consumer có thể unsubscribe để từ chối nhận dữ liệu từ Producer
    Chuyện gì sẽ xảy ra nếu tư duy và xử lý dữ liệu gửi đến cho Consumer giống như một Collection?
    Array và Events đều là một tập hợp (Collection) nhiều phần tử
        Array: Xử lý phần tử liên tục (forEach, map, filter)
        Observable: Xử lý phần tử ngắt quãng theo thời gian
    Tại sao không dùng Promise?
        Promise được thiết kế chỉ resolve hoặc reject một lần
        Xử lí nhiều dữ liệu phải tạo nhiều Promise
        Không thể cancel một Promise
Array và các methods thường gặp
    Foreach
        https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach
    Map 
    Filter
    Take
    ConcatAlll
Observable rules
    Áp dụng cho tất cả những dạng theo mô hình Producer - Consumer
    Lưu ý:
        Producer phải là nơi quản lý việc gửi dữ liệu và phát tính hiệu
        Consumer phải là người đăng ký (subscribe, forEach) nhận dữ liệu
        Consumer phải có hỗ trợ phương thức để hủy đăng ký (unsubscribe)
    Sau khi subscribe sẽ return về một subscription. Bên trong subscription sẽ chứa một function dùng để hủy 
        đăng ký nhận dữ liệu
    Mục tiêu: Hiện thực các method (map, filter, take, forEach, ...) có thể áp dụng cho tất cả các mô hình 
        Producer - Consumer khi bọc chúng vào trong Observable Pattern
        Ví dụ: setTimeout, setInterval, Events, fetch, ....
Observable timeout
    Observable.timeout(1000)
        Khi gọi hàm timeout() thì nó chưa được phép kích hoạt mà nó chỉ được phép kích hoạt khi hàm subscribe() 
        được gọi
    forEach tạm thời được hiểu là subscribe
    Sau khi subscribe sẽ return về một subscription. Bên trong subscription sẽ chứa một function dùng để hủy 
        đăng ký nhận dữ liệu
Observable Interval
    SetTimeout chỉ chạy 1 lần nên có thể dùng được trong Promise, Observable. Tuy nhiên Interval chạy nhiều lần
        do đó nó không thể dùng được trong Promise nhưng có thể dùng được trong Observable
Observable fromEvent
Observable take
    https://rxmarbles.com/#take
    Cơ chế lan truyền sự kiện
Observable map
Observable filter
So sánh page, client và offset
    body - cửa sổ màn hình - khối box
    Kích thước cửa sổ màn hình, chỉ nhìn được 1 phần của body. Nếu muốn nhìn toàn bộ body thì phải Scroll chuột
    pageX, pageY: Là giá trị theo trục x và trục y của con trỏ chuột đối với body
    clientX, clientY: Giá trị đối với cửa sổ màn hình
    offsetX, offsetY: Giá trị đối với viền của khối box(div...)
Observable debounceTime
Xây dựng event double click
    Các hàm đã xây dựng ở trên thì chủ yếu biến đổi từ 1 Observable gốc về 1 Observable mới tức là theo tỷ lệ 1:1
    Observable debounceTime là mô hình kết hợp 2 Observable tạo thành 1 Observable mới
    Khi Observable 1 nhận được event thì nó sẽ tạm thời lưu lại chứ chưa gửi xuống cho Observable kết quả chỉ khi nào 
        nó gặp 1 sự kiện được đưa đến từ Observable thứ 2 thì nó sẽ gộp tất cả các dữ liệu phía trước mà mình đã lưu lại 
        gộp vào trong 1 Array để gửi xuống cho Observable kết quả
    Kết hợp với debounceTime và filter để xây dựng 1 event mới trong JavaScript đó là bắt sự kiện người dùng nhấn double click
        tức là nhấn chuột 2 lần liên tục. Đây là event không có sẵn trong Javascript
Xây dựng Autocomplete Component
    Setup server backend(in back-end folder)
        in back-end folder: npm start 
        Browser: http://localhost:8888/data?search=nur
    Setup live-server(in back-end folder)
        in back-end folder: npm install -g live-server
        live-server -v 
        live-server --port=8090
            -> http://127.0.0.1:8090/
    fetch
        Bản chất của fetch trong JavaScript là nó sử dungj Promise ở bên dưới nên nếu áp dụng mô hình fetch này vào trong Observable 
            thì mỗi lầ subscribe thì chỉ chạy 1 lần thôi
        Ứng với mỗi string thì sẽ đưa về 1 Observable của fetch
        Tầm vực: Khi khai báo 1 function thì bản thân function cũng là object nên nó được lưu vào trong window(function, var được lưu
            vào trong window) do đó có thể chia sẻ qua 1 file js khác 
    Stream data
    Nested observable
        Bắt buộc phải nhập ít nhất 2 ký tự thì mới tiến hành gọi API
        map((url) => Observable.fetch(url)) nhận được Observable nhưng thực chất fetch chưa được chạy nghĩa là API chưa được gọi, fetch
            gọi API chỉ được chạy khi Observable này được subscribe 
    Display results
    Loading, empty icon
    Highlight search
Xây dựng Observable với API chuẩn
    Observable APIs
        Chuyển đổi cú pháp từ dạng function về dạng Class
        Interface chuẩn của Observable
        complete(): Tùy vào mô hình áp dụng, đối với setTimeout, event thì nó có complete sau 1s. Đối với Interval thì nó ko bao giờ hoàn thành.
            Chỉ đến khi unsubscribe thì nó mới dừng
        Áp dụng vào Promise để gọi API thì có next, error, complete
    Observable Class 01
        live-server --port=8090
            -> http://127.0.0.1:8090/
    Observable Class 02
    Observable Class 03
    Module Pattern, IIFE
        Dấu ngầm function _subscribe ở bên dưới
        Symbol thông thường được dùng làm key cho 1 Object nên có thể ứng dụng được cho trường hợp che dấu đi 1 method, chỉ thấy được method
            chứ ko gọi được method đó theo kiểu Object.method
        Muốn truy cập được vào method được dấu này thì phải truy cập vào biến được gán giá trị Symbol
            const SymbolSubscribe = Symbol('Subscribe')
        Không muốn người dùng truy cập thì mình dấu đi biến SymbolSubscribe. Người dùng chỉ có thể truy cập được vào Observable mà ko truy cập 
            được vào: const SymbolSubscribe
            -> Module Pattern
    FromEvent
    take 
    Map, filter
    DebounceTime
    buffer
    